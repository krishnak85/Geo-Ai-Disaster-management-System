Creating a full code for a Geo-AI Disaster Management System is a complex task that would involve several components, including geographic information systems (GIS), machine learning, data collection and processing, and a user interface. Here is a high-level outline of the components you would need to create such a system:

1. Data Collection and Processing:
- Collect data relevant to disaster management, including geospatial data, historical disaster data, real-time weather data, and demographic data.
- Clean, preprocess, and normalize the data for further analysis.

2. Geographic Information System (GIS) integration:
- Integrate GIS software like QGIS or ArcGIS to visualize and analyze the geospatial data.
- Perform geospatial analysis to identify regions at risk, disaster-prone areas, and optimal routes for evacuation and resource allocation.

3. Machine Learning Models:
- Develop machine learning models to predict the likelihood and impact of disasters based on historical data and real-time weather data.
- Use unsupervised learning techniques like clustering to find patterns in the data and identify areas at risk.
- Train supervised learning models like regression or classification algorithms to predict the severity of disasters and the required resources for mitigation efforts.

4. User Interface:
- Create a user interface that allows users to interact with the data, visualize it on a map, and access the results of the machine learning models.
- Incorporate features like searching for specific regions, filtering for particular types of disasters, and visualizing evacuation routes and resource allocations.
- Ensure the user interface is user-friendly and accessible on various devices such as smartphones, tablets, and computers.

5. Deployment:
- Deploy your system as a web application or a mobile app so that it can be easily accessed and used by different stakeholders such as government agencies, non-profit organizations, and the general public.

Here's a simple Python code snippet using GeoPandas for geospatial data processing and Folium for visualization:

```python
import geopandas as gpd
import folium

# Load geospatial data (for example, a shapefile of the area of interest)
gdf = gpd.read_file('path/to/your/geospatial/data.shp')

# Preprocess and clean the data (remove missing values, normalize, etc.)
# (Add your data preprocessing steps here)

# Perform spatial analysis (for example, find the centroid of each polygon)
gdf['centroid'] = gdf.geometry.centroid

# Convert the GeoDataFrame to a simple DataFrame for easier mapping
df = pd.DataFrame(gdf.drop(columns='geometry'))

# Create an empty map
map = folium.Map()

# Iterate through the row, adding a marker for each centroid
for index, row in df.iterrows():
    folium.Marker(location=[row['centroid'].y, row['centroid'].x],
                  popup=row['disaster_type']).add_to(map)

# Save the map to an HTML file
map.save('map.html')
